using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using XssVader.Controllers;
using XssVader.Models;

namespace XssVader.Controllers
{
    internal class ExploitController
    {

        private readonly XssController _xssController;
        private readonly RequestController _requestController;
        private readonly LogController _log;
        private readonly XssModel? _xssReflected;
        private readonly MessageController _messageController;
        private string _url;
        public ExploitController(string url)
        {
            _url = url;
            _log = new LogController();
            _xssController = new XssController();
            _requestController = new RequestController(_url);
            _messageController = new MessageController();
        }
        public async Task DOMXSS()
        {
            try
            {
                string response = await _requestController.RequestHandle(_url);
                Console.WriteLine("------------------------------------------------------------");

                List<string> DOM = _xssController.DOMBasedXSS(response);

                if (DOM.Count == 0)
                {
                    _messageController.ShowMessageMagenta("X Not found DOM XS on target.");
                    Console.WriteLine("------------------------------------------------------------");
                    return;
                }

                _messageController.ShowMessageGreen("+ Possible DOM XSS found on target.");

                foreach (string DOMItem in DOM)
                {
                    Console.WriteLine(DOMItem);
                }
                Console.WriteLine("------------------------------------------------------------");

            } catch (Exception e)
            {
                return;
            }
        }
        public async Task ReflectedXss()
        {
            int loadCount = 0;
            var xssPayloadList = _xssController.GetReflectedPayloads();

            _messageController.ShowMessageYellow($"+ Testing { xssPayloadList.Type } XSS payloads on target:");

            foreach (var payload in xssPayloadList.Payloads)
            {
                string completeUrl = $"{_url}{payload}";
                
                Console.Write($"\r({loadCount++}/{xssPayloadList.Payloads.Count}) ");

                try
                {
                    string response = await _requestController.RequestHandle(completeUrl);

                    if (response.Contains(payload))
                    {
                        Console.Write($"- Target can be vulnerable by: ");
                        _messageController.ShowMessageBlue(payload);
                    }
                }
                catch (Exception e)
                {
                    try
                    {
                        _log.LogError($"{e.Message} : {payload}");
                    } 
                    catch (Exception ex)
                    {
                        continue;
                    }

                    continue;
                }
            }
        }
    }
}
